#!usr/env/bin python3
'''
Orbital_Motion.py
python 3
Matthew Delfavero
Astrophysical Dynamics/Adcomp
Orbital motion tools

This body of code exists to implement rk4 techniques for bodies
in a given potential.
'''
from __future__ import print_function, division, unicode_literals

######## Functions ########

def Error():
	# Step-doubling, and comparison.
	# 	Error estimate is the difference between two steps
	#	and one big step.
	# 	Compare to fractional error desired
	#	You can multiply the step size by the ratio of
	#	fractional error to desired fractional error,
	#	to the inverted power of your runge kutta.
	# Mixed order methods (5th order -> 6 values)
	pass

def grav(obj):
	import numpy as np
	G = 1
	M = 1
	r2 = obj[1]**2 + obj[2]**2 + obj[3]**2
	A = -(G*M/r2)/np.sqrt(r2)
	return np.asarray([0,obj[4],obj[5],obj[6],
		A*obj[1],A*obj[2],A*obj[3]])

def update_from_potential(obj,dt,potential):
	# Obj: [0] mass [1-3] x,y,z [4-6] vx, vy, vz
	obj_0 = obj
	d_obj_0 = potential(obj_0)
	obj_1 = obj_0 + (dt/2)*d_obj_0
	d_obj_1 = potential(obj_1)
	obj_2 = obj_0 + (dt/2)*d_obj_1
	d_obj_2 = potential(obj_2)
	obj_3 = obj_0 + dt*d_obj_2
	d_obj_3 = potential(obj_3)
	obj = obj_0 + (dt/6)*(d_obj_0 + 2*d_obj_1 + 2*d_obj_2 + d_obj_3)
	return obj

def write_line(fout, obj, t):
	fout.write("%3.4f %3.4f %3.4f %3.4f %3.4f %3.4f %3.4f\n"%(
		t, obj[1], obj[2], obj[3], obj[4], obj[5], obj[6]))

def loop(obj,dt,T,fname,potential = grav):
	import numpy as np
	n_steps = int(T/dt)
	t = 0
	fout = open(fname,'w')

	for i in range(n_steps):
		write_line(fout, obj, t)
		obj = update_from_potential(obj,dt,potential)
		t += dt
	
	fout.close

######## Plots ########

def plot_xy_vs_t(fname,image_file):
	import numpy as np
	import pylab as pl

	data = np.loadtxt(fname)
	t = data[:,0]
	x = data[:,1]
	y = data[:,2]

	pl.figure()
	pl.plot(t,x,label = "x")
	pl.plot(t,y,label = "y")
	pl.xlabel("Time")
	pl.ylabel("Position")
	pl.title("x and y vs t")
	pl.savefig(image_file)
	pl.close()

######## Main ########

def main():
	import numpy as np
	obj = np.asarray([0,1,1,0,0,1,0]).astype(float)
	dt = 0.1
	T = 100
	fname = "sample_data.txt"
	loop(obj,dt,T,fname)
	plot_xy_vs_t(fname)

######## Execution ########

if __name__ == "__main__":
	main()
